/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1800  // 600, 1200
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mmv_input_listener {
    precisionnav {
        layers = <1>;
        input-processors = <&zip_xy_scaler 1 3>;
    };

    precisionnum {
        layers = <2>;
        input-processors = <&zip_xy_scaler 1 2>;
    };
};

&mt {
    tapping-term-ms = <65>;
    flavor = "balanced";
};

/ {
    behaviors {
        mmv {
            acceleration-exponent = <2>; // 1
            time-to-max-speed-ms = <40>; // 40
            delay-ms = <0>; // 0
        };

        hm: hm {
            compatible = "zmk,behavior-hold-tap";
            label = "HM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            quick-tap-ms = <65>;
            tapping-term-ms = <125>;
            global-quick-tap;
            flavor = "tap-preferred";
            hold-trigger-on-release;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <140>;
            quick-tap-ms = <62>;
            flavor = "hold-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 20 21 22 23 24 14 25 15 5 6 16 26 27 17 7 8 18 28 29 19 9>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <140>;
            quick-tap-ms = <62>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 10 20 21 1 11 12 2 3 4 24 14 13 23 22 25 26 28 27 29 9 8 7 6 5 15>;
        };

        mo_tog: mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TOG";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
        };

        sk_mo: sk_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "SK_MO";
            bindings = <&mo>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
        };

        space_alt: space_alt {
            compatible = "zmk,behavior-hold-tap";
            label = "SPACE_ALT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <235>;
            quick-tap-ms = <100>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <10 12 20 21 16 17 19 6>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        Caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <10 19>;
            layers = <0>;
        };

        Alt+tab {
            bindings = <&kp LA(TAB)>;
            key-positions = <10 11 12>;
            layers = <0>;
            timeout-ms = <100>;
        };

        Escape {
            bindings = <&kp ESCAPE>;
            key-positions = <0 9>;
            layers = <0>;
        };

        Tilde {
            bindings = <&kp TILDE>;
            key-positions = <0 10>;
            layers = <0>;
        };

        Cut {
            bindings = <&kp LC(X)>;
            key-positions = <21 22>;
            layers = <0>;
        };

        Copy {
            bindings = <&kp LC(C)>;
            key-positions = <22 23>;
            layers = <0>;
        };

        Paste {
            bindings = <&kp LC(V)>;
            key-positions = <23 24>;
            layers = <0>;
        };

        screenshot {
            bindings = <&kp LG(LS(S))>;
            key-positions = <9 8>;
            layers = <0>;
        };

        split_screen {
            bindings = <&kp LG(LEFT)>;
            key-positions = <30 35>;
            layers = <0>;
        };

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <27 28>;
            layers = <0>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <18 19>;
            layers = <0>;
            timeout-ms = <100>;
        };

        boot_r {
            bindings = <&bootloader>;
            key-positions = <33 5 9>;
            layers = <0>;
        };

        boot_l {
            bindings = <&bootloader>;
            key-positions = <0 4 32>;
            layers = <0>;
        };

        alt_f4 {
            bindings = <&kp LA(F4)>;
            key-positions = <0 1 2>;
            layers = <0>;
        };

        esc_left {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            layers = <0>;
            timeout-ms = <100>;
        };

        bluetooth {
            bindings = <&mo 1>;
            key-positions = <32 33>;
        };

        win_nav_left {
            bindings = <&kp LG(LEFT)>;
            key-positions = <16 17>;
            layers = <6>;
        };

        win_nav_right {
            bindings = <&kp LG(RIGHT)>;
            key-positions = <19 18>;
            layers = <6>;
        };

        win_nav_up {
            bindings = <&kp LG(UP_ARROW)>;
            key-positions = <7 8>;
            layers = <6>;
        };

        win_nav_down {
            bindings = <&kp LG(DOWN_ARROW)>;
            key-positions = <17 18>;
            layers = <6>;
        };

        win_nav_left_shift {
            bindings = <&kp LG(LS(LEFT))>;
            key-positions = <16 17 18>;
            layers = <6>;
        };

        win_nav_right_shift {
            bindings = <&kp LG(LS(RIGHT))>;
            key-positions = <19 18 17>;
            layers = <6>;
        };

        num_equal {
            bindings = <&kp EQUAL>;
            key-positions = <16 17 18>;
            layers = <5>;
        };

        num_par_left {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <16 17>;
            layers = <5>;
        };

        num_par_right {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <18 19>;
            layers = <5>;
        };

        del_left {
            bindings = <&kp DEL>;
            key-positions = <20 23>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "Base";
            bindings = <
  &kp Q              &kp W           &kp F               &kp P             &kp B                             &kp J        &kp L             &kp U                &kp Y           &kp SQT
  &hml LEFT_SHIFT A  &hm LEFT_GUI R  &hm LEFT_CONTROL S  &hml RIGHT_ALT T  &kp G                             &kp K        &hmr RIGHT_ALT N  &hm RIGHT_CONTROL E  &hm LEFT_GUI I  &hmr RIGHT_SHIFT O
  &kp Z              &kp X           &kp C               &kp D             &kp V                             &kp M        &kp H             &kp COMMA            &kp DOT         &kp SLASH
                                     &lt 5 ENTER         &lt 2 TAB         &space_alt RIGHT_ALT BACKSPACE    &lt 6 SPACE  &lt 3 ENTER       &lt 4 DEL
            >;
        };

        blt {
            display-name = "BLT";
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &bt BT_CLR     &trans        &trans        &trans        &trans
  &trans  &trans  &trans  &trans  &trans    &trans         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3
  &trans  &trans  &trans  &trans  &trans    &kp LG(LA(K))  &kp C_VOL_UP  &kp C_VOL_DN  &trans        &bt BT_SEL 4
                  &trans  &trans  &trans    &trans         &trans        &trans
            >;
        };

        navi_right {
            bindings = <
  &trans     &trans     &trans     &trans        &trans       &kp CARET       &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
  &trans     &trans     &trans     &kp LEFT_ALT  &trans       &msc SCRL_UP    &kp LEFT       &kp UP_ARROW  &kp DOWN_ARROW        &kp RIGHT
  &kp LC(Z)  &kp LC(Y)  &kp LC(X)  &kp LC(C)     &kp LC(V)    &msc SCRL_DOWN  &kp HOME       &kp PAGE_UP   &kp PAGE_DOWN         &kp END
                        &trans     &trans        &trans       &kp UNDERSCORE  &trans         &trans
            >;
        };

        navi_left {
            bindings = <
  &kp EXCLAMATION  &kp AT_SIGN      &kp HASH           &kp DOLLAR             &kp PERCENT    &trans  &trans      &trans            &trans      &kp C_VOLUME_UP
  &trans           &kp LEFT_BRACE   &kp LEFT_BRACKET   &kp LEFT_PARENTHESIS   &trans         &trans  &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT  &kp C_MUTE
  &trans           &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS  &trans         &trans  &trans      &trans            &trans      &kp C_VOL_DN
                                    &trans             &kp PIPE               &trans         &trans  &trans      &trans
            >;
        };

        F1_F12 {
            bindings = <
  &kp F1  &kp F2   &kp F3   &kp F4   &trans    &trans  &trans  &trans  &trans  &trans
  &kp F5  &kp F6   &kp F7   &kp F8   &trans    &trans  &trans  &trans  &trans  &trans
  &kp F9  &kp F10  &kp F11  &kp F12  &trans    &trans  &trans  &trans  &trans  &trans
                   &trans   &trans   &trans    &trans  &trans  &trans
            >;
        };

        NUMERICAL {
            bindings = <
  &kp C_AL_CALC  &trans  &trans  &trans  &trans    &kp PLUS      &kp N7        &kp N8        &kp N9        &kp MINUS
  &trans         &trans  &trans  &trans  &trans    &kp ASTERISK  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &mt KP_DIVIDE SLASH
  &trans         &trans  &trans  &trans  &trans    &kp PERIOD    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp COMMA
                         &trans  &trans  &trans    &kp N0        &trans        &kp EQUAL
            >;
        };

        focus_switch {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &kp LG(N7)  &kp LG(N8)  &kp LG(N9)  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &kp LG(N4)  &kp LG(N5)  &kp LG(N6)  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &trans
                  &trans  &trans  &trans    &trans  &trans      &trans
            >;
        };
    };
};
